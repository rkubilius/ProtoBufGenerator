unit test1;

interface

// *********************************** 
//   classes for test1.proto
//   generated by ProtoBufGenerator 
//        kami-soft 2016-2017
// ***********************************

uses
  SysUtils,
  Classes,
  pbInput,
  pbOutput,
  pbPublic,
  uAbstractProtoBufClasses,
  TestImport1;

type
  //enumeration
  TEnumG0=(
    g1 = 1,
    g2 = 2
  );

  //nested enumeration
  TEnum1=(
    Val1 = 1,
    Val2 = 2
  );

  //simple message
  TTestMsg0 = class(TAbstractProtoBufClass)
  public
    const tag_Field1 = 1;
    const tag_Field2 = 2;
  strict private
    FField1: Integer;
    FField2: Int64;

    procedure SetField1(Tag: Integer; const Value: Integer);
    procedure SetField2(Tag: Integer; const Value: Int64);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    property Field1: Integer index tag_Field1 read FField1 write SetField1;
    property Field2: Int64 index tag_Field2 read FField2 write SetField2;
  end;

  //nested message
  TTestNested1 = class(TAbstractProtoBufClass)
  public
    const tag_Field1 = 1;
  strict private
    FField1: Integer;

    procedure SetField1(Tag: Integer; const Value: Integer);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    property Field1: Integer index tag_Field1 read FField1 write SetField1;
  end;

  TTestMsg1 = class(TAbstractProtoBufClass)
  public
    const tag_DefField1 = 1;
    const tag_DefField2 = 2;
    const tag_DefField3 = 3;
    const tag_DefField4 = 4;
    const tag_DefField5 = 5;
    const tag_DefField6 = 6;
    const tag_DefField7 = 7;
    const tag_DefField8 = 8;
    const tag_DefField9 = 9;
    const tag_FieldMsg1 = 20;
    const tag_FieldE1 = 21;
    const tag_FieldE2 = 22;
    const tag_FieldNested1 = 30;
    const tag_FieldNested2 = 31;
    const tag_FieldArr1List = 40;
    const tag_FieldArr2List = 41;
    const tag_FieldArr3List = 42;
    const tag_FieldArrE1List = 43;
    const tag_FieldMArr2List = 44;
    const tag_FieldArr4List = 45;
    const tag_FieldArr5List = 46;
    const tag_FieldImp1 = 50;
    const tag_FieldImp2 = 51;
  strict private
    FDefField1: Integer;
    FDefField2: Int64;
    FDefField3: string;
    FDefField4: Double;
    FDefField5: Boolean;
    FDefField6: TEnumG0;
    FDefField7: Int64;
    FDefField8: Integer;
    FDefField9: Single;
    FFieldMsg1: TTestMsg0;
    FFieldE1: TEnum1;
    FFieldE2: TEnum1;
    FFieldNested1: TTestNested1;
    FFieldNested2: TTestNested1;
    FFieldArr1List: TPBList<Integer>;
    FFieldArr2List: TPBList<Integer>;
    FFieldArr3List: TPBList<string>;
    FFieldArrE1List: TPBList<TEnum1>;
    FFieldMArr2List: TProtoBufClassList<TTestMsg0>;
    FFieldArr4List: TPBList<Single>;
    FFieldArr5List: TPBList<Integer>;
    FFieldImp1: TEnumGlobal;
    FFieldImp2: TEnumGlobal;

    procedure FieldArr1ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
    procedure FieldArr2ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
    procedure FieldArr3ListChanged(Sender: TObject; const Item: string; Action: TCollectionNotification);
    procedure FieldArrE1ListChanged(Sender: TObject; const Item: TEnum1; Action: TCollectionNotification);
    procedure FieldMArr2ListChanged(Sender: TObject; const Item: TTestMsg0; Action: TCollectionNotification);
    procedure FieldArr4ListChanged(Sender: TObject; const Item: Single; Action: TCollectionNotification);
    procedure FieldArr5ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
    procedure SetDefField1(Tag: Integer; const Value: Integer);
    procedure SetDefField2(Tag: Integer; const Value: Int64);
    procedure SetDefField3(Tag: Integer; const Value: string);
    procedure SetDefField4(Tag: Integer; const Value: Double);
    procedure SetDefField5(Tag: Integer; const Value: Boolean);
    procedure SetDefField6(Tag: Integer; const Value: TEnumG0);
    procedure SetDefField7(Tag: Integer; const Value: Int64);
    procedure SetDefField8(Tag: Integer; const Value: Integer);
    procedure SetDefField9(Tag: Integer; const Value: Single);
    procedure SetFieldE1(Tag: Integer; const Value: TEnum1);
    procedure SetFieldE2(Tag: Integer; const Value: TEnum1);
    procedure SetFieldNested2(Tag: Integer; const Value: TTestNested1);
    procedure SetFieldImp1(Tag: Integer; const Value: TEnumGlobal);
    procedure SetFieldImp2(Tag: Integer; const Value: TEnumGlobal);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    //fields with defaults
    property DefField1: Integer index tag_DefField1 read FDefField1 write SetDefField1 default 2;
    property DefField2: Int64 index tag_DefField2 read FDefField2 write SetDefField2 default -1;
    property DefField3: string index tag_DefField3 read FDefField3 write SetDefField3; // default 'yes';
    property DefField4: Double index tag_DefField4 read FDefField4 write SetDefField4; // default 1.1;
    property DefField5: Boolean index tag_DefField5 read FDefField5 write SetDefField5; // default true;
    property DefField6: TEnumG0 index tag_DefField6 read FDefField6 write SetDefField6 default g2;
    property DefField7: Int64 index tag_DefField7 read FDefField7 write SetDefField7 default 100;
    property DefField8: Integer index tag_DefField8 read FDefField8 write SetDefField8 default 1;
    property DefField9: Single index tag_DefField9 read FDefField9 write SetDefField9; // default 1.23e1;
    //field of message type
    property FieldMsg1: TTestMsg0 read FFieldMsg1;
    //fields of nested enumeration type
    property FieldE1: TEnum1 index tag_FieldE1 read FFieldE1 write SetFieldE1;
    property FieldE2: TEnum1 index tag_FieldE2 read FFieldE2 write SetFieldE2 default Val2;
    //fields of nested message type
    property FieldNested1: TTestNested1 read FFieldNested1;
    property FieldNested2: TTestNested1 index tag_FieldNested2 read FFieldNested2 write SetFieldNested2;
    //repeated fields
    property FieldArr1List: TPBList<Integer> read FFieldArr1List;
    property FieldArr2List: TPBList<Integer> read FFieldArr2List;
    property FieldArr3List: TPBList<string> read FFieldArr3List;
    property FieldArrE1List: TPBList<TEnum1> read FFieldArrE1List;
    property FieldMArr2List: TProtoBufClassList<TTestMsg0> read FFieldMArr2List;
    property FieldArr4List: TPBList<Single> read FFieldArr4List;
    property FieldArr5List: TPBList<Integer> read FFieldArr5List;
    //fields of imported types
    property FieldImp1: TEnumGlobal index tag_FieldImp1 read FFieldImp1 write SetFieldImp1;
    property FieldImp2: TEnumGlobal index tag_FieldImp2 read FFieldImp2 write SetFieldImp2;
  end;

  //test proto identifier name conversion
  TTestMsg1Extension1 = class(TTestMsg1)
  public
    const tag_Field_name_test_1 = 187;
    const tag_Field_Name_test_2 = 220;
  strict private
    FField_name_test_1: Integer;
    FField_Name_test_2: Integer;

    procedure SetField_name_test_1(Tag: Integer; const Value: Integer);
    procedure SetField_Name_test_2(Tag: Integer; const Value: Integer);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    property Field_name_test_1: Integer index tag_Field_name_test_1 read FField_name_test_1 write SetField_name_test_1;
    property Field_Name_test_2: Integer index tag_Field_Name_test_2 read FField_Name_test_2 write SetField_Name_test_2;
  end;

implementation

{ TTestMsg0 }

constructor TTestMsg0.Create;
begin
  inherited;
  RegisterRequiredField(tag_Field1);
  RegisterRequiredField(tag_Field2);
end;

destructor TTestMsg0.Destroy;
begin
  inherited;
end;

function TTestMsg0.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_Field1:
      Field1 := ProtoBuf.readInt32;
    tag_Field2:
      Field2 := ProtoBuf.readInt64;
  else
    Result := False;
  end;
end;

procedure TTestMsg0.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_Field1] then
    ProtoBuf.writeInt32(tag_Field1, FField1);
  if FieldHasValue[tag_Field2] then
    ProtoBuf.writeInt64(tag_Field2, FField2);
end;

procedure TTestMsg0.SetField1(Tag: Integer; const Value: Integer);
begin
  FField1:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg0.SetField2(Tag: Integer; const Value: Int64);
begin
  FField2:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TTestNested1 }

function TTestNested1.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_Field1:
      Field1 := ProtoBuf.readInt32;
  else
    Result := False;
  end;
end;

procedure TTestNested1.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_Field1] then
    ProtoBuf.writeInt32(tag_Field1, FField1);
end;

procedure TTestNested1.SetField1(Tag: Integer; const Value: Integer);
begin
  FField1:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TTestMsg1 }

constructor TTestMsg1.Create;
begin
  inherited;
  DefField1 := 2;
  DefField2 := -1;
  DefField3 := 'yes';
  DefField4 := 1.1;
  DefField5 := true;
  DefField6 := g2;
  DefField7 := 100;
  DefField8 := 1;
  DefField9 := 1.23e1;
  FFieldMsg1 := TTestMsg0.Create;
  FFieldMsg1.ParentMessage := Self;
  FFieldMsg1.ParentTag := tag_FieldMsg1;
  FieldE2 := Val2;
  FFieldNested1 := TTestNested1.Create;
  FFieldNested1.ParentMessage := Self;
  FFieldNested1.ParentTag := tag_FieldNested1;
  FFieldArr1List := TPBList<Integer>.Create;
  FFieldArr1List.OnNotify := FieldArr1ListChanged;
  FFieldArr2List := TPBList<Integer>.Create;
  FFieldArr2List.OnNotify := FieldArr2ListChanged;
  FFieldArr3List := TPBList<string>.Create;
  FFieldArr3List.OnNotify := FieldArr3ListChanged;
  FFieldArrE1List := TPBList<TEnum1>.Create;
  FFieldArrE1List.OnNotify := FieldArrE1ListChanged;
  FFieldMArr2List := TProtoBufClassList<TTestMsg0>.Create;
  FFieldMArr2List.OnNotify := FieldMArr2ListChanged;
  FFieldArr4List := TPBList<Single>.Create;
  FFieldArr4List.OnNotify := FieldArr4ListChanged;
  FFieldArr5List := TPBList<Integer>.Create;
  FFieldArr5List.OnNotify := FieldArr5ListChanged;
end;

destructor TTestMsg1.Destroy;
begin
  FFieldMsg1.Free;
  FFieldNested1.Free;
  FFieldArr1List.Free;
  FFieldArr2List.Free;
  FFieldArr3List.Free;
  FFieldArrE1List.Free;
  FFieldMArr2List.Free;
  FFieldArr4List.Free;
  FFieldArr5List.Free;
  inherited;
end;

function TTestMsg1.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
var
  tmpBuf: TProtoBufInput;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  tmpBuf:= nil;
  try
    case FieldNumber of
      tag_DefField1:
        DefField1 := ProtoBuf.readInt32;
      tag_DefField2:
        DefField2 := ProtoBuf.readInt64;
      tag_DefField3:
        DefField3 := ProtoBuf.readString;
      tag_DefField4:
        DefField4 := ProtoBuf.readDouble;
      tag_DefField5:
        DefField5 := ProtoBuf.readBoolean;
      tag_DefField6:
        DefField6 := TEnumG0(ProtoBuf.readEnum);
      tag_DefField7:
        DefField7 := ProtoBuf.readSInt64;
      tag_DefField8:
        DefField8 := ProtoBuf.readFixed32;
      tag_DefField9:
        DefField9 := ProtoBuf.readFloat;
      tag_FieldMsg1:
        begin
          tmpBuf := ProtoBuf.ReadSubProtoBufInput;
          FFieldMsg1.LoadFromBuf(tmpBuf);
        end;
      tag_FieldE1:
        FieldE1 := TEnum1(ProtoBuf.readEnum);
      tag_FieldE2:
        FieldE2 := TEnum1(ProtoBuf.readEnum);
      tag_FieldNested1:
        begin
          tmpBuf := ProtoBuf.ReadSubProtoBufInput;
          FFieldNested1.LoadFromBuf(tmpBuf);
        end;
      tag_FieldNested2:
        FieldNested2 := TTestNested1(ProtoBuf.readEnum);
      tag_FieldArr1List:
        FFieldArr1List.Add(ProtoBuf.readInt32);
      tag_FieldArr2List:
        begin
          if WireType = WIRETYPE_LENGTH_DELIMITED then
          begin
            tmpBuf:=ProtoBuf.ReadSubProtoBufInput;
            while tmpBuf.getPos < tmpBuf.BufSize do
              FFieldArr2List.Add(tmpBuf.readInt32);
          end else
            FFieldArr2List.Add(ProtoBuf.readInt32);
        end;
      tag_FieldArr3List:
        FFieldArr3List.Add(ProtoBuf.readString);
      tag_FieldArrE1List:
        FFieldArrE1List.Add(TEnum1(ProtoBuf.readEnum));
      tag_FieldMArr2List:
        FFieldMArr2List.AddFromBuf(ProtoBuf, fieldNumber);
      tag_FieldArr4List:
        begin
          if WireType = WIRETYPE_LENGTH_DELIMITED then
          begin
            tmpBuf:=ProtoBuf.ReadSubProtoBufInput;
            while tmpBuf.getPos < tmpBuf.BufSize do
              FFieldArr4List.Add(tmpBuf.readFloat);
          end else
            FFieldArr4List.Add(ProtoBuf.readFloat);
        end;
      tag_FieldArr5List:
        FFieldArr5List.Add(ProtoBuf.readFixed32);
      tag_FieldImp1:
        FieldImp1 := TEnumGlobal(ProtoBuf.readEnum);
      tag_FieldImp2:
        FieldImp2 := TEnumGlobal(ProtoBuf.readEnum);
    else
      Result := False;
    end;
  finally
    tmpBuf.Free
  end;
end;

procedure TTestMsg1.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
var
  tmpBuf: TProtoBufOutput;
  i: Integer;
begin
  inherited;
  tmpBuf:= TProtoBufOutput.Create;
  try
    if FieldHasValue[tag_DefField1] then
      ProtoBuf.writeInt32(tag_DefField1, FDefField1);
    if FieldHasValue[tag_DefField2] then
      ProtoBuf.writeInt64(tag_DefField2, FDefField2);
    if FieldHasValue[tag_DefField3] then
      ProtoBuf.writeString(tag_DefField3, FDefField3);
    if FieldHasValue[tag_DefField4] then
      ProtoBuf.writeDouble(tag_DefField4, FDefField4);
    if FieldHasValue[tag_DefField5] then
      ProtoBuf.writeBoolean(tag_DefField5, FDefField5);
    if FieldHasValue[tag_DefField6] then
      ProtoBuf.writeInt32(tag_DefField6, Integer(FDefField6));
    if FieldHasValue[tag_DefField7] then
      ProtoBuf.writeSInt64(tag_DefField7, FDefField7);
    if FieldHasValue[tag_DefField8] then
      ProtoBuf.writeFixed32(tag_DefField8, FDefField8);
    if FieldHasValue[tag_DefField9] then
      ProtoBuf.writeFloat(tag_DefField9, FDefField9);
    if FieldHasValue[tag_FieldMsg1] then
      SaveMessageFieldToBuf(FFieldMsg1, tag_FieldMsg1, tmpBuf, ProtoBuf);
    if FieldHasValue[tag_FieldE1] then
      ProtoBuf.writeInt32(tag_FieldE1, Integer(FFieldE1));
    if FieldHasValue[tag_FieldE2] then
      ProtoBuf.writeInt32(tag_FieldE2, Integer(FFieldE2));
    if FieldHasValue[tag_FieldNested1] then
      SaveMessageFieldToBuf(FFieldNested1, tag_FieldNested1, tmpBuf, ProtoBuf);
    if FieldHasValue[tag_FieldNested2] then
      ProtoBuf.writeInt32(tag_FieldNested2, Integer(FFieldNested2));
    if FieldHasValue[tag_FieldArr1List] then
      for i := 0 to FFieldArr1List.Count-1 do
        ProtoBuf.writeInt32(tag_FieldArr1List, FFieldArr1List[i]);
    if FieldHasValue[tag_FieldArr2List] then
    begin
      tmpBuf.Clear;
      for i := 0 to FFieldArr2List.Count-1 do
        tmpBuf.writeRawInt32(FFieldArr2List[i]);
      ProtoBuf.writeMessage(tag_FieldArr2List, tmpBuf);
    end;
    if FieldHasValue[tag_FieldArr3List] then
      for i := 0 to FFieldArr3List.Count-1 do
        ProtoBuf.writeString(tag_FieldArr3List, FFieldArr3List[i]);
    if FieldHasValue[tag_FieldArrE1List] then
      for i := 0 to FFieldArrE1List.Count-1 do
        ProtoBuf.writeInt32(tag_FieldArrE1List, Integer(FFieldArrE1List[i]));
    if FieldHasValue[tag_FieldMArr2List] then
      FFieldMArr2List.SaveToBuf(ProtoBuf, tag_FieldMArr2List);
    if FieldHasValue[tag_FieldArr4List] then
    begin
      tmpBuf.Clear;
      for i := 0 to FFieldArr4List.Count-1 do
        tmpBuf.writeRawFloat(FFieldArr4List[i]);
      ProtoBuf.writeMessage(tag_FieldArr4List, tmpBuf);
    end;
    if FieldHasValue[tag_FieldArr5List] then
      for i := 0 to FFieldArr5List.Count-1 do
        ProtoBuf.writeFixed32(tag_FieldArr5List, FFieldArr5List[i]);
    if FieldHasValue[tag_FieldImp1] then
      ProtoBuf.writeInt32(tag_FieldImp1, Integer(FFieldImp1));
    if FieldHasValue[tag_FieldImp2] then
      ProtoBuf.writeInt32(tag_FieldImp2, Integer(FFieldImp2));
  finally
    tmpBuf.Free
  end;
end;

procedure TTestMsg1.SetDefField1(Tag: Integer; const Value: Integer);
begin
  FDefField1:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField2(Tag: Integer; const Value: Int64);
begin
  FDefField2:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField3(Tag: Integer; const Value: string);
begin
  FDefField3:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField4(Tag: Integer; const Value: Double);
begin
  FDefField4:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField5(Tag: Integer; const Value: Boolean);
begin
  FDefField5:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField6(Tag: Integer; const Value: TEnumG0);
begin
  FDefField6:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField7(Tag: Integer; const Value: Int64);
begin
  FDefField7:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField8(Tag: Integer; const Value: Integer);
begin
  FDefField8:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetDefField9(Tag: Integer; const Value: Single);
begin
  FDefField9:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetFieldE1(Tag: Integer; const Value: TEnum1);
begin
  FFieldE1:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetFieldE2(Tag: Integer; const Value: TEnum1);
begin
  FFieldE2:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetFieldNested2(Tag: Integer; const Value: TTestNested1);
begin
  FFieldNested2:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetFieldImp1(Tag: Integer; const Value: TEnumGlobal);
begin
  FFieldImp1:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.SetFieldImp2(Tag: Integer; const Value: TEnumGlobal);
begin
  FFieldImp2:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1.FieldArr1ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArr1List] := FieldArr1List.Count > 0;
end;

procedure TTestMsg1.FieldArr2ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArr2List] := FieldArr2List.Count > 0;
end;

procedure TTestMsg1.FieldArr3ListChanged(Sender: TObject; const Item: string; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArr3List] := FieldArr3List.Count > 0;
end;

procedure TTestMsg1.FieldArrE1ListChanged(Sender: TObject; const Item: TEnum1; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArrE1List] := FieldArrE1List.Count > 0;
end;

procedure TTestMsg1.FieldMArr2ListChanged(Sender: TObject; const Item: TTestMsg0; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldMArr2List] := FieldMArr2List.Count > 0;
end;

procedure TTestMsg1.FieldArr4ListChanged(Sender: TObject; const Item: Single; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArr4List] := FieldArr4List.Count > 0;
end;

procedure TTestMsg1.FieldArr5ListChanged(Sender: TObject; const Item: Integer; Action: TCollectionNotification);
begin
  FieldHasValue[tag_FieldArr5List] := FieldArr5List.Count > 0;
end;

{ TTestMsg1Extension1 }

function TTestMsg1Extension1.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_Field_name_test_1:
      Field_name_test_1 := ProtoBuf.readInt32;
    tag_Field_Name_test_2:
      Field_Name_test_2 := ProtoBuf.readInt32;
  else
    Result := False;
  end;
end;

procedure TTestMsg1Extension1.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_Field_name_test_1] then
    ProtoBuf.writeInt32(tag_Field_name_test_1, FField_name_test_1);
  if FieldHasValue[tag_Field_Name_test_2] then
    ProtoBuf.writeInt32(tag_Field_Name_test_2, FField_Name_test_2);
end;

procedure TTestMsg1Extension1.SetField_name_test_1(Tag: Integer; const Value: Integer);
begin
  FField_name_test_1:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TTestMsg1Extension1.SetField_Name_test_2(Tag: Integer; const Value: Integer);
begin
  FField_Name_test_2:= Value;
  FieldHasValue[Tag]:= True;
end;

end.
